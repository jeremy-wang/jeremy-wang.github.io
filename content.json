[{"title":"MarkDown","date":"2017-04-11T03:01:23.000Z","path":"2017/04/11/MarkDown/","text":"欢迎使用 Cmd Markdown 编辑阅读器 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 [ ] 支持以 PDF 格式导出文稿 [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 [x] 新增 Todo 列表功能 [x] 修复 LaTex 公式渲染问题 [x] 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 \\$1600 5 手机 \\$12 12 管线 \\$1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。","tags":[]},{"title":"Algorithm","date":"2017-04-07T04:06:21.000Z","path":"2017/04/07/Algorithm/","text":"Algorithm Introduction 算法，更像是解决问题的简便方法，将一些繁杂的计算用更加省力、省时的办法简化，计算机的出现让人们摆脱了大量的计算，但是算法却从未就此消声灭迹，因为计算机资源时有限的，并且计算机擅长做一些重复、数据量大的计算，但很多问题不是仅仅计算大量的数据就能得出结论，有些问题对于计算机来说，即使能算出来，所需要的时间超出了人们所能承受的范围，那也是不可接受的。 因此，算法不仅仅简便了人们的计算，是人类的智慧的闪光，也能让计算机更快效率更高。 我们遇到的大多数算法都来源于日常生活中的经验总结，将生活中的问题抽象出来，把它转化为一个数学问题，然后通过合理的数学变换，将问题转变的有更加符合我们计算的形式。 因此，算法更像是有点小懒惰的聪明人的trick，将问题变得简单，减少重复性的劳动，从而更好的生活。 算法存在了我们的生活的方方面面，比如上下楼梯的电梯算法，浏览购物网站时的智能推荐商品的算法，具体购物选择时你点击了按照一定的商品属性排序，期间就有相关的排序算法在帮你排好序。 更为智能的算法正在影响着我们的未来，机器学习、深度学习、人工智能的算法，当前的无人驾驶已经在工业界得到实现，人脸识别已经可以做到99.9%的正确率，以及各种各样的语音助手如siri等，让你们感觉机器的智能；算法联通着我们社会的过去、现在和未来。","tags":[{"name":"算法 系列开篇","slug":"算法-系列开篇","permalink":"http://jeremywang.cn/tags/算法-系列开篇/"}]},{"title":"Chomsky","date":"2017-03-29T13:00:35.000Z","path":"2017/03/29/Chomsky/","text":"Chomsky 一个人的语言知识是以某种方式体现在人脑这个有限的机体之中的，因此，语言知识就是一个由某种规则和原则构成的有限系统。但是一个会说话的人却能讲出并理解他从未听到过的句子以及和我们听到的不十分相似的句子。而且，这种能力是无限的。如果不受时间和记忆力的限制，那么一个人所获得的知识系统规定了特定形式、结构和意义的句子的数目也将是无限的。不难看到这种能力在正常的人类生活中得到自由的运用。我们在日常生活中所使用和理解的句子范围是极大的，无论就其实际情况而言还是为了理论描写上的需要，我们完全有理由认为人们使用和理解的句子范围都是无限的。” 把句子分割为成份层次的思想最早出现于实验心理学的W.Wundt的《大众心理学》中，而从古典时期开始的传统欧洲语法则是研究如何确定具体的单词之间的关系，而不是研究确定单词所表示的成分之间的层次关系。 在随后的自然语言处理中，形成了两种有代表性的形式模型，一是以成份为基础的形式模型（如“短语结构语法”），二是欧洲句法学者的以词为基础的语法或者依存语法。 其中在以成分为基础的形式模型方面做的比较出色的是1928年出生于美国费城的Chomsky，他把形势语法理解为数目有限的规则的集合，这些规则可以生成语言中的合格句子，并排除不符合规则的句子。 形式语言是一种外延极为广泛的句子，它既可以指代自然语言，也可以指各种用符号构成的语言(计算机程序设计语言等)，Chomsky将自然语言和各种符号语言放在统一的平台上去研究，因此他的理论更加具有概括性。 形式语法的符号用G表示，用语法G所生成的形式语言用L(G)表示。他把形式语法G定义为四元组： G = {Vn , Vt, S , P} 其中： Vn是非终止符号：不能处于生成状态的结点 Vt是终止符号 ： 只能是出于生成状态的结点 S：Vn的初始符号 P：转换状态的规则集合：一般规则的形式为φ → ψ， Chomsky的四类语法： 0型语法：规则为φ → ψ，要求φ不是空符号串。 1型语法 上下文有关语法:对上下文有关并敏感，需要改变转换的前部分和后部分有特定的要求 2型语法 上下文无关语法:与上下文无关，对某一个状态转移到下一个状态没有上下文的限制。上下文无关文法在自然语言的形势分析中就形成了“短语结构语法”。 3型语法 有限状态语法：重写规则为A→aQ或A→a。其中，A和Q是非终极符号，a是终极符号，而A→a只不过是A→aQ这个重写规则中当Q为空符号时的一种特殊情况。如果把A和Q看成不同的状态，那么，由重写规则可知，由状态A转入状态Q时，可生成一个终极符号a，因此，这种语法叫做有限状态语法。有限状态语法又叫做3型语法。 相应语法的对应关系每一个有限状态语法的都是上下文无关的； 每一个上下文无关语法都是上下文有关的； 而每一个上下文有关语法都是0型的。 Chomsky把由0型语法生成的语言叫0型语言，把由上下文有关语法、上下文无关语法、有限状态语法生成的语言分别叫做上下文有关语言、上下文无关语言、有限状态语言。有限状态语言包含于上下文无关语言之中，上下文无关语言包含于上下文有关语言之中，上下文有关语言包含于0型语言之中。这样就形成了语法的“Chomsky层级”（Chomsky hierarchy）。在自然语言处理中,我们最感兴趣的是上下文无关语法和上下文无关语言,它们是短语结构语法理论的主要研究对象。 评价早在19世纪之初，德国杰出的语言学家和人文学者W. V. Humboldt(洪堡特，1767-1835)就观察到“语言是有限手段的无限运用”。W.V.Humboldt在《论人类语言结构的差异及其对人类精神发展的影响》（1836年单独印行）一书的第十二章“对语言方法的详细分析”中说，“语言面对着一个无限的、无边无际的领域，即一切可思维对象的总和，因此，语言必须无限地运用有限的手段，而思维力量和语言创造力量的同一性确保了语言能够做到这一点。” 但是，由于当时尚未找到揭示这种理解所包含的本质内容的技术工具和方法，W.V.Humboldt的论断还是不成熟的。 Chomsky的其他方面第一次看到Chomsky的名字并不是从编译原理课本上，而是寒假在b站上看的一部纪录片美国梦之安魂曲,他作为一名左翼批评家对美国的经济不平等和政治腐败等问题进行了思考，他在纪录片里把这些问题剖析的很透彻，精英文化的自建壁垒，教育资源的不均衡，金融寡头、垄断企业对美国党派的话语权，对语言学的研究让他对社会和世界的理解更加深刻。","tags":[{"name":"chomsky 自然语言处理 上下文无关文法 编译原理","slug":"chomsky-自然语言处理-上下文无关文法-编译原理","permalink":"http://jeremywang.cn/tags/chomsky-自然语言处理-上下文无关文法-编译原理/"}]},{"title":"Compiler","date":"2017-03-28T15:04:18.000Z","path":"2017/03/28/Compiler/","text":"Super tiny compiler 概要标签（空格分隔）parser compiler lisp c 编译器什么是编译器？ *Unix操作系统的电脑，可以通过终端进行一些小程序的编译和运行，比如gcc（GNU c compiler)等，编译器的主要作用是将高级程序语言翻译为cpu能够理解并执行的机器语言（二进制)。 super tiny compiler这个小型的编译器主要实现了从lisp的函数语法到c的函数的转变，而不是一般的操作系统中的编译器；将高级程序设计语言编译为机器语言。 构造编译器的程序的三个步骤 解析： parser转换：transform代码生成：code generation 解析：分为词法分析和语法分析 词法分析接收源代码，然后将源程序分割成Token的词片段，整个过程是在词法分析器tokenizer／lexer里完成的。Token实际上是一个由一些代码语句组成的数组，可以是程序设计语言中允许出现的各种元素的集合。 语法分析接收之前的词法分析生成的Token，使他们转换为一种抽象的表达，描述代码语句和每个片段的关系，这种表达方式称为中间表示（intermediate representation）或者抽象语法树（Abstract Syntax Tree）AST。 抽象语法树是一个嵌套关系很深的对象，使用了一种更加容易处理、便于理解程序的方式来代表代码本身。 转换在解析之后的下一步就是转换，他只是把AST做一些修改，它可以在同种语言下操作AST，也可以把AST翻译成全新的语言。 转换AST的方法：我们之前的AST中有很多相似的元素，这些元素都有type属性，他们被称为AST结点，这些结点含有多种属性，可以用于描述AST的部分信息。 转换AST的时候结点是可以添加、移动和替代的，也是可以根据现有的AST生成一个全新的AST。 因为这个编译器的目标是把输入的代码转换为一种新的语言，所以我们会着重于产生一个针对新语言的全新AST。 因此，为了能够处理所有的结点，我们需要采用深度优先的遍历方式。 在此，如果没我们直接是在AST的内部操作，而不是产生一个新的AST，那么就需要在这里介绍所有的种类的抽象，但目前访问所有结点的方法以及足够。 代码生成编译器的最后一个阶段是代码生成，这个阶段所做的事情是会和转换重叠，但代码生成的最主要部分还是根据AST来输出代码。 代码的生成有多种工作方式，但编译器会重用之前生成的token，有些会创建独立的代码表示，以便于线性的输出代码， 所完成的代码生成器需要知道如何“打印”AST中所有类型的结点，然后他会递归的调用自身，知道所有代码都被打印到一个很长的字符串中。","tags":[]},{"title":"Mac下使用hexo建立自己的博客","date":"2017-03-24T15:55:48.000Z","path":"2017/03/24/Mac下使用hexo建立自己的博客/","text":"预装小工具为什么要装一些小工具呢？因为在你的Mac下你的终端可能刚打开的时候是这个样子的： 这么小的字体是不太适合长时间的操作，所以我们可以在个性化设置里面调整窗口的大小和以及将背景更改透明度为: 工具简介 oh my zsh : 主要用来美化中断，使用一些不错的terminal主题 Homebrew ：终端下自动的来安装一些软件和包 npm ：包管理 git : 版本控制（如果电脑有Xcode，则一般是已经安装了的） node.js : 主要用来生成静态文件 npm,git和node.js均可以通过homebrew的命令行进行安装。 $ brew install npm 开始建立博客然后基本的配件完成后，我们就开始个人博客的建立了。 首先在当前用户的文件集中新建一个专门放自己博客的文件夹: $ mkdir folder_name 这个命令是用来新建一个名为folder name的文件，此处的folder name是自定义的。 进入该文件夹 $ cd folder_name 这个命令使用来改变当前文件夹到一个名为folder_name的文件夹。 使用命令 $ npm install $ sudo npm install -g hexo 来进行基本的hexo安装. 这一处hexo的安装是和官方文档上写的是不同的，sudo是获取管理员权限，所以该命令是需要输入你的密码（这个密码也就是一般屏幕唤醒后输入的密码），如果使用官方文档的话会出现某些module丢失，有可能是权限的问题。 安装完毕之后你使用 $ hexo init 可以初始化这个模版博客的界面 生成相应的静态页面 $ hexo generate 或者使用简写(hexo g) 可以初始化这个模版博客的界面 你可以使用”hexo server”来运行从而在自己的浏览器看看效果以便调试，推荐使用chrome等支持度好一点的浏览器。 $ hexo server 或者使用简写 (hexo s) 可以初始化这个模版博客的界面,完成这一步之后你可以看到这样的终端提示： 你可以在chrome等浏览器下输入下划线部分的url http://localhost:4000，查看博客的生成情况，进行个性化的调试和修改。输入url之后的界面： 上图的Hello World是主题自带的第一篇博客，你可以删除显影的markdown文件来删除掉这篇博文，因此新建博文的方法就是新建一个markdown文件了。使用如下命令进行新建： $ hexo new blog_name 此处的blog name可以随体定义。然后在相应的资源文件下就可以生成该blog name的.md(markdown)文件了。 关联你的github1.创建仓库 登录你的Github帐号，新建仓库，名为用户名.github.io固定写法，如gonghonglou.github.io即下图中1所示： 本地的blog文件夹下内容为： _config.yml db.json node_modules package.json scaffolds source themes 终端cd到blog文件夹下，vim打开_config.yml，命令如下： $ vim _config.yml 打开后往下滑到最后，单击键“i”进入insert mode,修改成下边的样子： deploy: type: git repository: https://github.com/gonghonglou/gonghonglou.github.io.git branch: master 之后按下“esc”退出insert mode并按下‘shift’和‘：’，输入：wq! 从而保存修改。 你需要将repository后gonghonglou换成你自己的用户名，地址在上图2位置获取。hexo 3.1.1版本后type:值为git。 注意坑二：在配置所有的_config.yml文件时（包括theme中的），在所有的冒号:后边都要加一个空格，否则执行hexo命令会报错，切记 切记 在blog文件夹目录下执行生成静态页面命令： $ hexo generate 或者：hexo g 此时若出现如下报错： ERROR Local hexo not found in ~/blog ERROR Try runing: 'npm install hexo --save' 则执行命令： npm install hexo --save 若无报错，自行忽略此步骤。 再执行配置命令： $ hexo deploy 或者：hexo d 注意坑三：若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git： $ npm install hexo-deployer-git --save 再次执行hexo generate和hexo deploy命令。 若你未关联Github，则执行hexo deploy命令时终端会提示你输入Github的用户名和密码，即 Username for &apos;https://github.com&apos;: Password for &apos;https://github.com&apos;: hexo deploy命令执行成功后，浏览器中打开网址http://gonghonglou.github.io（将gonghonglou换成你的用户名）能看到和打开http://localhost:4000时一样的页面。 为避免每次输入Github用户名和密码的麻烦，可参照第二节方法 2.添加ssh key到Github 1.1.检查SSH keys是否存在Github执行如下命令，检查SSH keys是否存在。如果有文件id_rsa.pub或id_dsa.pub，则直接进入步骤1.3将SSH key添加到Github中，否则进入下一步生成SSH key。 $ ls -al ~/.ssh 1.2.生成新的ssh key执行如下命令生成public/private rsa key pair，注意将your_email@example.com换成你自己注册Github的邮箱地址。 $ ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 默认会在相应路径下（~/.ssh/id_rsa.pub）生成id_rsa和id_rsa.pub两个文件。 1.3.将ssh key添加到Github中Find前往文件夹~/.ssh/id_rsa.pub打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到Github的Add SSH key页面即可。 进入Github –&gt; Settings –&gt; SSH keys –&gt; add SSH key: Title里任意添一个标题，将复制的内容粘贴到Key里，点击下方Add key绿色按钮即可。 发布文章 终端cd到blog文件夹下，执行如下命令新建文章： hexo new &quot;postName&quot; 名为postName.md的文件会建在目录/blog/source/_posts下，postName是文件名，为方便链接不建议掺杂汉字。你当然可以用vim来编辑文章。我在用Mou编辑器，支持预览，虽然其预览主题并非我喜欢，如果你有好用的markdown编辑器请推荐给我，感激不尽！ 文章编辑完成后，终端cd到blog文件夹下，执行如下命令来发布： hexo generate //生成静态页面 hexo deploy //将文章部署到Github 至此，Mac上搭建基于Github的Hexo博客就完成了。下面的内容是介绍安装theme和绑定个人域名，如果有兴趣且还有耐心的话，请继续吧。 安装theme 你可以到Hexo官网主题页去搜寻自己喜欢的theme。这里以hexo-theme-next为例 终端cd到 blog 目录下执行如下命令： $ git clone https://github.com/iissnan/hexo-theme-next themes/next 将blog目录下_config.yml里theme的名称landscape修改为next 终端cd到blog目录下执行如下命令(每次部署文章的步骤)： $ hexo clean //清除缓存文件 (db.json) 和已生成的静态文件 (public) $ hexo g //生成缓存和静态文件 $ hexo d //重新部署到服务器 至于更改theme内容比如名称、描述、头像等去修改blog/_config.yml文件和blog/themes/next/_config.yml文件中对应的属性名称即可， 不要忘记冒号:后加空格。 NexT 使用文档里有极详细的介绍。 绑定个人域名 现在使用的域名是Github提供的二级域名，也可以绑定为自己的个性域名。购买域名，可以到GoDaddy官网，也可以到阿里万网购买，腾讯有相应的学生优惠，因此我在腾讯云上学生认证之后算是免费得到了一个域名。 1.Github端 在/blog/themes/next/source目录下新建文件名为：CNAME文件，注意没有后缀名！直接将自己的域名如：gonghonglou.com写入。 终端cd到blog目录下执行如下命令重新部署： $ hexo clean $ hexo g $ hexo d 注意坑四：网上许多都是说在Github上直接新建CNAME文件，如果这样的话，在你下一次执行hexo d部署命令后CNAME文件就消失了，因为本地没有此文件嘛。 2.域名解析 如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加CNAME记录。登录万网，在你购买的域名后边点击：解析 –&gt; 添加解析 记录类型：CNAME 主机记录：将域名解析为example.com（不带www），填写@或者不填写 记录值：gonghonglou.github.io. (不要忘记最后的.，gonghonglou改为你自己的用户名)，点击保存即可，如下图： 此时，点击访问http://jeremywang.cn和访问http://jeremy-wang.github.io效果一致。 参考链接个性化的修改之前的步骤基本完成了博客的搭建，但你只是弄在本地进行调试，而且是模版是需要添加个人元素的才能有自己的个人的意味。因此：你需要修改自己博客目录下的yml文件。","tags":[{"name":"Mac Hexo yilia","slug":"Mac-Hexo-yilia","permalink":"http://jeremywang.cn/tags/Mac-Hexo-yilia/"}]},{"title":"发声","date":"2017-03-22T01:19:30.000Z","path":"2017/03/22/发声/","text":"向世界说声你好Hello,world 像是大多数程序员的第一次程序的尝试，在终端或者屏幕前成功输出一个“Hello，world”的字符串，现在我也算是有了处个人空间来写点东西，可以分享给更多的人看到。 为什么要写博客因为之前很喜欢记录，于是找了各种编辑、笔记软件，印象笔记、IA writer等等，但个人写下来都感觉自己总结的太片面，虽然本来也就是写给自己看的，但仅仅把自己的想法总结下来，作为自己的大脑的一个扩展坞，大部分的总结是不会再看，只是之后偶然翻到，会惊讶自己当年写了那样一些东西，却不会再有什么进步。 但是公开的写出来给大家分享就会更加三四而后行，会严谨的组织自己的语言，并且也能从各种看客那里得到反馈，知识的传播也正是如此，使用严谨的语言，防止知识在传播过程中发生偏差。 起源话说之前一直有建立一个个人网站的想法，但真正有时间和精力也是最近，之前想到搭建网站就是各种复杂的设置和dreamweaver的繁杂设计和各种逻辑功能结构的编写，就觉得自己不能坚持下去。 而现在偶然得知了hexo这样的一个架构于github服务器的个人博客框架，经过几次尝试之后，也算是小小的完成自己的blog的搭建，而且网站内容的更新方式和blog书写使用markdown都是很方便，还原了博客的最初目的：写作和分享，而不必去在布局和图片的复杂设置上煞费苦心的设计。 下一篇的内容预告既然得益于hexo的帮助，有了这样一个自己的小空间，那么下一篇就专门来写写我是怎么搭建起来这样一个自己的博客的，的确找到一个好的教程很重要，hexo的github的Readme写的都比较简洁，真实操作会遇到各种小问题，希望我的下一篇博文能给你带来一点帮助。","tags":[{"name":"First  Hello world","slug":"First-Hello-world","permalink":"http://jeremywang.cn/tags/First-Hello-world/"}]}]